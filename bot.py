import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# üîë –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
PORT = int(os.getenv("PORT", 10000))
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # –î–ª—è keep-alive

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}  # {username: {"chat_id": int, "files": [file_id]}}

# -------------------------------
# /start
# -------------------------------
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π username –±–µ–∑ @\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    await message.answer(text)

# -------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ username
# -------------------------------
@dp.message(lambda m: not m.text.startswith("/") and m.text.isalnum())
async def receive_username(message: types.Message):
    username = message.text.lower()
    user_data[username] = {"chat_id": message.chat.id, "files": []}
    await message.answer("‚úÖ Username –ø–æ–ª—É—á–µ–Ω!")

    if GROUP_CHAT_ID:
        await bot.send_message(GROUP_CHAT_ID, f"–ú–∞–º–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π username!")

# -------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
# -------------------------------
@dp.message(lambda m: m.document)
async def receive_file(message: types.Message):
    username = None
    for u, data in user_data.items():
        if data["chat_id"] == message.chat.id:
            username = u
            break
    
    if not username:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username!")
        return
    
    file_id = message.document.file_id
    user_data[username]["files"].append(file_id)
    
    await message.answer(
        "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...\n–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥."
    )
    
    await asyncio.sleep(4)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞ –ø–æ–¥–∞—Ä–∫–∞—Ö –Ω–µ—Ç —Ä–µ—Ñ–∞—É–Ω–¥–∞.")

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /chek username
# -------------------------------
@dp.message(Command("chek"))
async def chek_command(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /chek username")
        return
    
    target_username = args[1].lower()
    if target_username not in user_data:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    files = user_data[target_username]["files"]
    if not files:
        await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return
    
    for file_id in files:
        await message.answer_document(file_id)
    
    if GROUP_CHAT_ID:
        worker = message.from_user.username or message.from_user.id
        await bot.send_message(
            GROUP_CHAT_ID,
            f"–í–æ—Ä–∫–µ—Ä {worker} –ø–æ–ª—É—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç {target_username}"
        )

# -------------------------------
# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
# -------------------------------
async def handle_root(request):
    return web.Response(text="Cherry Deals bot is alive!")

async def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print(f"üåê Web server running on port {PORT}")

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------------
async def main():
    import traceback
    import aiohttp
    
    async def keep_alive():
        if not RENDER_EXTERNAL_URL:
            print("‚ö†Ô∏è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, keep-alive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            return
        async with aiohttp.ClientSession() as session:
            while True:
                try:
                    async with session.get(RENDER_EXTERNAL_URL) as resp:
                        print(f"Keep-alive ping: {resp.status}")
                except Exception as e:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive:", e)
                await asyncio.sleep(300)
    
    async def run_bot():
        while True:
            try:
                print("‚úÖ Bot is running...")
                await dp.start_polling(bot)
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
                traceback.print_exc()
                print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
    
    await asyncio.gather(start_web_server(), run_bot(), keep_alive())

if __name__ == "__main__":
    asyncio.run(main())
